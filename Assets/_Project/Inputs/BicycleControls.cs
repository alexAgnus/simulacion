//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Project/Inputs/BicycleControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BicycleControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BicycleControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BicycleControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""0fd36804-2354-476b-8db9-75cf32fdf73d"",
            ""actions"": [
                {
                    ""name"": ""VerticalVR"",
                    ""type"": ""Value"",
                    ""id"": ""7491f04c-70a2-41b0-8d41-2f0bab3844e2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HorizontalVR"",
                    ""type"": ""Button"",
                    ""id"": ""178a3119-c401-4ee2-9955-7a75383dcd9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""53880164-2850-45e5-ae70-86e909afedc7"",
                    ""path"": ""<OculusTouchController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VerticalVR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b21019cc-7b2e-488e-bce5-979f1e384c1d"",
                    ""path"": ""<OculusTouchController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalVR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_VerticalVR = m_Player.FindAction("VerticalVR", throwIfNotFound: true);
        m_Player_HorizontalVR = m_Player.FindAction("HorizontalVR", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_VerticalVR;
    private readonly InputAction m_Player_HorizontalVR;
    public struct PlayerActions
    {
        private @BicycleControls m_Wrapper;
        public PlayerActions(@BicycleControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @VerticalVR => m_Wrapper.m_Player_VerticalVR;
        public InputAction @HorizontalVR => m_Wrapper.m_Player_HorizontalVR;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @VerticalVR.started += instance.OnVerticalVR;
            @VerticalVR.performed += instance.OnVerticalVR;
            @VerticalVR.canceled += instance.OnVerticalVR;
            @HorizontalVR.started += instance.OnHorizontalVR;
            @HorizontalVR.performed += instance.OnHorizontalVR;
            @HorizontalVR.canceled += instance.OnHorizontalVR;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @VerticalVR.started -= instance.OnVerticalVR;
            @VerticalVR.performed -= instance.OnVerticalVR;
            @VerticalVR.canceled -= instance.OnVerticalVR;
            @HorizontalVR.started -= instance.OnHorizontalVR;
            @HorizontalVR.performed -= instance.OnHorizontalVR;
            @HorizontalVR.canceled -= instance.OnHorizontalVR;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnVerticalVR(InputAction.CallbackContext context);
        void OnHorizontalVR(InputAction.CallbackContext context);
    }
}
